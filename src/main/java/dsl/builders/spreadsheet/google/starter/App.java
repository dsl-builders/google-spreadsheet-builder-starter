/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dsl.builders.spreadsheet.google.starter;

import builders.dsl.spreadsheet.builder.google.GoogleSpreadsheetBuilder;
import builders.dsl.spreadsheet.query.api.SpreadsheetCriteria;
import builders.dsl.spreadsheet.query.google.GoogleSpreadsheetCriteriaFactory;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.drive.DriveScopes;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Collections;
import java.util.List;

import static builders.dsl.spreadsheet.api.Keywords.auto;
import static com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp.browse;

public class App {

    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens";
    private static final List<String> SCOPES = Collections.singletonList(DriveScopes.DRIVE);
    private static final String CREDENTIALS_FILE_PATH = "/credentials.json";

    public static void main(String[] args) throws Exception {
        // get the credentials
        Credential credentials = getCredentials();

        // create new Google Spreadsheet Builder
        GoogleSpreadsheetBuilder builder = GoogleSpreadsheetBuilder.builder("Hello Spreadsheet", credentials).build();

        // defined the spreadsheet content
        builder.build(w -> w.sheet("Hello", s -> {
            s.filter(auto);
            s.freeze(0, 1);
            s.row(r -> r.cell(c -> c.value("Salutation").width(auto)).cell(c -> c.value("Who").width(auto)));
            s.row(r -> r.cell("Hello").cell("World"));
        }));

        // query the generated spreadsheet
        SpreadsheetCriteria criteria = GoogleSpreadsheetCriteriaFactory.create(builder.getId(), credentials).criteria();

        int worldCellsSize = criteria.query(w ->
                w.sheet(s ->
                        s.row(r ->
                                r.cell(c ->
                                        c.value("World")
                                )
                        )
                )
        ).getCells().size();

        if (worldCellsSize != 1) {
            throw new IllegalStateException("There should be exactly one cell with the text 'World'. Was " + worldCellsSize);
        }

        // open new spreadsheet in browser
        browse(builder.getWebLink());
    }

    /**
     * Creates an authorized Credential object.
     * @return An authorized Credential object.
     */
    private static Credential getCredentials() {
        try {
            final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
            // Load client secrets.
            InputStream in = App.class.getResourceAsStream(CREDENTIALS_FILE_PATH);

            if (in == null) {
                browse("https://developers.google.com/drive/api/v3/quickstart/java");
                throw new IllegalStateException("Please, click ENABLE API, finishg the flow and save the credentials JSON file as src/main/resources" + CREDENTIALS_FILE_PATH);
            }

            GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

            // Build flow and trigger user authorization request.
            GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                    HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                    .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                    .setAccessType("offline")
                    .build();
            LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
            return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
        } catch (GeneralSecurityException | IOException e) {
           throw new IllegalStateException("Cannot obtain client credentials", e);
        }
    }
}
